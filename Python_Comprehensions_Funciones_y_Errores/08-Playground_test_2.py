"""
Para resolver este desafÃ­o, tu reto es refactorizar el cÃ³digo base utilizando la caracterÃ­stica de "List Comprehension" de Python.

El cÃ³digo base incluye una lista llamada numbers que contiene nÃºmeros pares e impares. El algoritmo actual selecciona los nÃºmeros pares de esta lista y los agrega a una nueva lista llamada even_numbers.

Tu reto es crear la misma lista utilizando la caracterÃ­stica de "List Comprehension" de Python para crear la lista de nÃºmeros pares de manera mÃ¡s concisa y eficiente y el resultado deberÃ­a quedar en la variable even_numbers_v2. Las dos tÃ©cnicas deberÃ­an de dar el mismo resultado.

Ejemplo:

Input:
[35, 16, 10, 34, 37, 25]

Output:
v1 => [16, 10, 34]
v2 => [16, 10, 34]
"""

numbers = [35, 16, 10, 34, 37, 25];

even_numbers = [];
for number in numbers:
  if number % 2 == 0:
    even_numbers.append(number);
print('v1 =>', even_numbers);

# Ahora usando List Comprehension ğŸ‘‡
even_numbers_v2 = [num for num in numbers if num % 2 == 0];

print('v2 =>', even_numbers_v2);